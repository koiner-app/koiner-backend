version: '3.9'

services:

  #
  # Infrastructure
  #

  nginx-proxy:
    container_name: koiner-nginx
    image: nginxproxy/nginx-proxy:alpine
    restart: on-failure
    ports:
      - '80:80'
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
    networks:
      - webproxy

  amqp:
    container_name: koiner-amqp
    image: rabbitmq:3-management
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    ports:
      - '${AMQP_INTERFACE:-127.0.0.1}:5672:5672'
      - '${AMQP_INTERFACE:-127.0.0.1}:15672:15672'

  koiner-postgres:
    container_name: koiner-postgres
    image: postgres
    profiles: ['koiner', 'koiner-graphql', 'koiner-sync', 'all']
    restart: always
    networks:
      - webproxy
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_MULTIPLE_DATABASES=${DB_DATABASES}
      - VIRTUAL_PORT=5432
      - VIRTUAL_HOST=${DB_VIRTUAL_HOST}
    volumes:
      - ./postgres-init.sh:/docker-entrypoint-initdb.d/postgres-init.sh
      - ./data/pgdata:/var/lib/postgresql/data

  #
  # GraphQL
  #

  graphql-gateway:
    container_name: koiner-graphql-gateway
    image: koiner/graphql-gateway
    build:
      context: .
      dockerfile: 'apps/graphql/gateway/Dockerfile'
      target: local
    profiles: ['koiner', 'koiner-graphql', 'all']
    command: npm run start:graphql-gateway
    env_file:
      - 'apps/graphql/gateway/.env'
    depends_on:
      chain-graphql:
        condition: service_healthy
      contracts-graphql:
        condition: service_healthy
      network-graphql:
        condition: service_healthy
      tokenize-graphql:
        condition: service_healthy
    volumes:
      - ./data/graphql/gateway/logs:/var/logs
      - ./apps:/app/apps
      - ./modules:/app/modules
      - /app/node_modules
    networks:
      - default
      - webproxy
    dns:
      - 8.8.8.8
    ports:
      - '3000:3000'
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:3000/healthcheck || exit 1
      interval: 60s
      retries: 5
      start_period: 20s
      timeout: 10s

  #
  # Koiner Chain
  #

  chain-graphql:
    container_name: koiner-chain-graphql
    image: koiner/chain-graphql
    build:
      context: .
      dockerfile: 'apps/chain/graphql/Dockerfile'
      target: development
    profiles: ['koiner', 'koiner-graphql', 'all']
    command: npm run start:chain-graphql
    env_file:
      - 'apps/chain/graphql/.env'
    environment:
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - JSONRPC_NODES=${JSONRPC_NODES}
    depends_on:
      - koiner-postgres
      - amqp
    volumes:
      - ./data/chain/graphql/logs:/var/logs
      - ./apps:/app/apps
      - ./modules:/app/modules
      - /app/node_modules
    networks:
      - default
      - webproxy
    dns:
      - 8.8.8.8
    ports:
      - '3001:3001'
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:3001/health || exit 1
      interval: 60s
      retries: 5
      start_period: 20s
      timeout: 10s

  chain-sync:
    container_name: koiner-chain-sync
    image: koiner/chain-sync
    build:
      context: .
      dockerfile: 'apps/chain/sync/Dockerfile'
      target: development
    profiles: ['koiner', 'koiner-sync', 'all']
    command: npm run start:chain-sync
    env_file:
      - 'apps/chain/sync/.env'
    environment:
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - JSONRPC_NODES=${JSONRPC_NODES}
    depends_on:
      - koiner-postgres
      - amqp
    volumes:
      - ./data/chain/sync/logs:/var/logs
      - ./apps:/app/apps
      - ./modules:/app/modules
      - /app/node_modules
    networks:
      - webproxy
      - default
    dns:
      - 8.8.8.8
    ports:
      - '3101:3101'
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:3101/health || exit 1
      interval: 60s
      retries: 5
      start_period: 20s
      timeout: 10s

  #
  # Koiner Contracts
  #

  contracts-graphql:
    container_name: koiner-contracts-graphql
    image: koiner/contracts-graphql
    build:
      context: .
      dockerfile: 'apps/contracts/graphql/Dockerfile'
      target: development
    profiles: ['koiner', 'koiner-graphql', 'all']
    command: npm run start:contracts-graphql
    env_file:
      - 'apps/contracts/graphql/.env'
    environment:
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - JSONRPC_NODES=${JSONRPC_NODES}
    depends_on:
      - koiner-postgres
      - amqp
    volumes:
      - ./data/contracts/graphql/logs:/var/logs
      - ./apps:/app/apps
      - ./modules:/app/modules
      - /app/node_modules
    networks:
      - default
      - webproxy
    dns:
      - 8.8.8.8
    ports:
      - '3002:3002'
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:3002/health || exit 1
      interval: 60s
      retries: 5
      start_period: 20s
      timeout: 10s

  contracts-sync:
    container_name: koiner-contracts-sync
    image: koiner/contracts-sync
    build:
      context: .
      dockerfile: 'apps/contracts/sync/Dockerfile'
      target: development
    profiles: ['koiner', 'koiner-sync', 'all']
    command: npm run start:contracts-sync
    env_file:
      - 'apps/contracts/sync/.env'
    environment:
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - JSONRPC_NODES=${JSONRPC_NODES}
    depends_on:
      - koiner-postgres
      - amqp
    volumes:
      - ./data/contracts/sync/logs:/var/logs
      - ./apps:/app/apps
      - ./modules:/app/modules
      - /app/node_modules
    networks:
      - webproxy
      - default
    dns:
      - 8.8.8.8
    ports:
      - '3102:3102'
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:3102/health || exit 1
      interval: 60s
      retries: 5
      start_period: 20s
      timeout: 10s

  #
  # Koiner Tokenize
  #

  network-graphql:
    container_name: koiner-network-graphql
    image: koiner/network-graphql
    build:
      context: .
      dockerfile: 'apps/network/graphql/Dockerfile'
      target: development
    profiles: ['koiner', 'koiner-graphql', 'all']
    command: npm run start:network-graphql
    env_file:
      - 'apps/network/graphql/.env'
    environment:
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - JSONRPC_NODES=${JSONRPC_NODES}
    depends_on:
      - koiner-postgres
      - amqp
    volumes:
      - ./data/network/graphql/logs:/var/logs
      - ./apps:/app/apps
      - ./modules:/app/modules
      - /app/node_modules
    networks:
      - default
      - webproxy
    dns:
      - 8.8.8.8
    ports:
      - '3003:3003'
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:3003/health || exit 1
      interval: 60s
      retries: 5
      start_period: 20s
      timeout: 10s

  network-sync:
    container_name: koiner-network-sync
    image: koiner/network-sync
    build:
      context: .
      dockerfile: 'apps/network/sync/Dockerfile'
      target: development
    profiles: ['koiner', 'koiner-sync', 'all']
    command: npm run start:network-sync
    env_file:
      - 'apps/network/sync/.env'
    environment:
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - JSONRPC_NODES=${JSONRPC_NODES}
    depends_on:
      - koiner-postgres
      - amqp
    volumes:
      - ./data/network/sync/logs:/var/logs
      - ./apps:/app/apps
      - ./modules:/app/modules
      - /app/node_modules
    networks:
      - webproxy
      - default
    dns:
      - 8.8.8.8
    ports:
      - '3103:3103'
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:3103/health || exit 1
      interval: 60s
      retries: 5
      start_period: 20s
      timeout: 10s

  #
  # Koiner Tokenize
  #

  tokenize-graphql:
    container_name: koiner-tokenize-graphql
    image: koiner/tokenize-graphql
    build:
      context: .
      dockerfile: 'apps/tokenize/graphql/Dockerfile'
      target: development
    profiles: ['koiner', 'koiner-graphql', 'all']
    command: npm run start:tokenize-graphql
    env_file:
      - 'apps/tokenize/graphql/.env'
    environment:
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - JSONRPC_NODES=${JSONRPC_NODES}
    depends_on:
      - koiner-postgres
      - amqp
    volumes:
      - ./data/tokenize/graphql/logs:/var/logs
      - ./apps:/app/apps
      - ./modules:/app/modules
      - /app/node_modules
    networks:
      - default
      - webproxy
    dns:
      - 8.8.8.8
    ports:
      - '3004:3004'
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:3004/health || exit 1
      interval: 60s
      retries: 5
      start_period: 20s
      timeout: 10s

  tokenize-sync:
    container_name: koiner-tokenize-sync
    image: koiner/tokenize-sync
    build:
      context: .
      dockerfile: 'apps/tokenize/sync/Dockerfile'
      target: development
    profiles: ['koiner', 'koiner-sync', 'all']
    command: npm run start:tokenize-sync
    env_file:
      - 'apps/tokenize/sync/.env'
    environment:
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - JSONRPC_NODES=${JSONRPC_NODES}
    depends_on:
      - koiner-postgres
      - amqp
    volumes:
      - ./data/tokenize/sync/logs:/var/logs
      - ./apps:/app/apps
      - ./modules:/app/modules
      - /app/node_modules
    networks:
      - webproxy
      - default
    dns:
      - 8.8.8.8
    ports:
      - '3104:3104'
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:3104/health || exit 1
      interval: 60s
      retries: 5
      start_period: 20s
      timeout: 10s

  #
  # Koinos
  #

  config:
    build:
      context: ./modules/koinos/config/src
      args:
        - CONFIG_TAG=${CONFIG_TAG:-latest}
    profiles: ['koinos', 'koinos-core', 'all']
    environment:
      - DESCRIPTORS_TAG=${DESCRIPTORS_TAG:-master}
    volumes:
      - "${BASEDIR}:/koinos"

  mempool:
    container_name: koinos-mempool
    image: koinos/koinos-mempool:${MEMPOOL_TAG:-latest}
    profiles: ['koinos', 'koinos-core', 'all']
    depends_on:
      - amqp
      - config
      - chain-sync
      - contracts-sync
    volumes:
      - '${BASEDIR}:/koinos'
    command: --basedir=/koinos

  block_store:
    container_name: koinos-block-store
    image: koinos/koinos-block-store:${BLOCK_STORE_TAG:-latest}
    profiles: ['koinos', 'koinos-core', 'all']
    depends_on:
      - amqp
      - config
      - chain-sync
      - contracts-sync
    volumes:
      - '${BASEDIR}:/koinos'
    command: --basedir=/koinos

  chain:
    container_name: koinos-chain
    image: koinos/koinos-chain:${CHAIN_TAG:-latest}
    profiles: ['koinos', 'koinos-core', 'all']
    depends_on:
      amqp:
        condition: service_started
      block_store:
        condition: service_started
      mempool:
        condition: service_started
      config:
        condition: service_started
      chain-sync:
        condition: service_healthy
      contracts-sync:
        condition: service_healthy
    volumes:
      - '${BASEDIR}:/koinos'
    command: --basedir=/koinos

  p2p:
    container_name: koinos-p2p
    image: koinos/koinos-p2p:${P2P_TAG:-latest}
    profiles: ['koinos', 'koinos-core', 'all']
    depends_on:
      amqp:
        condition: service_started
      block_store:
        condition: service_started
      chain:
        condition: service_started
      config:
        condition: service_started
      chain-sync:
        condition: service_healthy
      contracts-sync:
        condition: service_healthy
    volumes:
      - '${BASEDIR}:/koinos'
    ports:
      - '${P2P_INTERFACE:-0.0.0.0}:8888:8888'
    command: --basedir=/koinos

  block_producer:
    container_name: koinos-block-producer
    image: koinos/koinos-block-producer:${BLOCK_PRODUCER_TAG:-latest}
    profiles: ['koinos', 'block_producer', 'all']
    depends_on:
      - amqp
      - mempool
      - chain
      - config
    volumes:
      - '${BASEDIR}:/koinos'
    command: --basedir=/koinos

  jsonrpc:
    container_name: koinos-jsonrpc
    image: koinos/koinos-jsonrpc:${JSONRPC_TAG:-latest}
    profiles: ['koinos', 'jsonrpc', 'all']
    depends_on:
      - amqp
      - config
    ports:
      - '${JSONRPC_INTERFACE:-0.0.0.0}:8080:8080'
    environment:
      - VIRTUAL_PORT=8080
      - VIRTUAL_HOST=${JSONRPC_VIRTUAL_HOST}
    volumes:
      - '${BASEDIR}:/koinos'
    command: --basedir=/koinos
    networks:
      - webproxy
      - default

  transaction_store:
    container_name: koinos-transaction-store
    image: koinos/koinos-transaction-store:${TRANSACTION_STORE_TAG:-latest}
    profiles: ['koinos', 'transaction_store', 'all']
    depends_on:
      - amqp
      - chain
      - config
    volumes:
      - '${BASEDIR}:/koinos'
    command: --basedir=/koinos

  contract_meta_store:
    container_name: koinos-contract-meta-store
    image: koinos/koinos-contract-meta-store:${CONTRACT_META_STORE_TAG:-latest}
    profiles: ['koinos', 'contract_meta_store', 'all']
    depends_on:
      - amqp
      - chain
      - config
    volumes:
      - '${BASEDIR}:/koinos'
    command: --basedir=/koinos

networks:
  webproxy:

volumes:
  letsencrypt-certs:
