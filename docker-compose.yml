version: "3.9"

services:

  nginx-proxy:
    image: nginxproxy/nginx-proxy:alpine
    restart: on-failure
    ports:
      - 80:80
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
    networks:
      - webproxy

  api:
    build:
      context: api
    command: npm run start:dev
    depends_on:
      - postgres
    volumes:
      - ./api:/app
      - ./logs:/var/logs
    networks:
      - webproxy
      - default
    dns:
      - 8.8.8.8
    ports:
      - 3010:5000
    environment:
      - KOINOS_CHAIN_ID=QmeehjqATVaC4ReXxwbw4DQLbEdEAo8SmTBVzZz8s5ZV5F
      - KOINOS_RPC=['https://jsonrpc.dev.koiner.app']
      - KOINOS_SIGNER_SEED=EdLl^v3zaUAf%TeY^Fe5Dm%FeXweQ$h7L$yhhlZ5Ta8P2f0E^^CV!7u%mH01
      - KOIN_CONTRACT_ID=19JntSm8pSNETT9aHTwAUHC5RMoaSmgZPJ
      - BATCH_SIZE=100
      - SYNC_SECRET=AHOY!
      - PORT=5000
      - VIRTUAL_PORT=5000
      - VIRTUAL_HOST=api.docker
      - DB_TYPE=${DB_TYPE}
      - DB_HOST=${DB_HOST}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_PORT=${DB_PORT}
      - POSTGRES_SYNC=false
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
      - RABBITMQ_HOST=amqp:5672
      - DEBUG=

  postgres:
    image: postgres
    restart: always
    networks:
      - default
      - webproxy
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - VIRTUAL_PORT=5432
      - VIRTUAL_HOST=pg.docker
    container_name: postgres-db
    volumes:
      - ./pgdata:/var/lib/postgresql/data

  #
  # Koinos
  #
  amqp:
    image: rabbitmq:3-management
    ports:
      - "${AMQP_INTERFACE:-127.0.0.1}:5672:5672"
      - "${AMQP_INTERFACE:-127.0.0.1}:15672:15672"

  config:
    build:
      context: ./koinos/config
      args:
        - CONFIG_TAG=${CONFIG_TAG:-latest}
    environment:
      - DESCRIPTORS_TAG=${DESCRIPTORS_TAG:-master}
    volumes:
      - "${BASEDIR}:/koinos"

  mempool:
    image: koinos/koinos-mempool:${MEMPOOL_TAG:-latest}
    depends_on:
      - amqp
      - config
    volumes:
      - "${BASEDIR}:/koinos"
    command: --basedir=/koinos

  block_store:
    image: koinos/koinos-block-store:${BLOCK_STORE_TAG:-latest}
    depends_on:
      - amqp
      - config
    volumes:
      - "${BASEDIR}:/koinos"
    command: --basedir=/koinos

  chain:
    image: koinos/koinos-chain:${CHAIN_TAG:-latest}
    depends_on:
      - amqp
      - block_store
      - mempool
      - config
    volumes:
      - "${BASEDIR}:/koinos"
    command: --basedir=/koinos

  p2p:
    image: koinos/koinos-p2p:${P2P_TAG:-latest}
    depends_on:
      - amqp
      - block_store
      - chain
      - config
    volumes:
      - "${BASEDIR}:/koinos"
    ports:
      - "${P2P_INTERFACE:-0.0.0.0}:8888:8888"
    command: --basedir=/koinos

  #   block_producer:
  #      image: koinos/koinos-block-producer:${BLOCK_PRODUCER_TAG:-latest}
  #      profiles: ["block_producer", "all"]
  #      depends_on:
  #         - amqp
  #         - mempool
  #         - chain
  #         - config
  #      volumes:
  #         - "${BASEDIR}:/koinos"
  #      command: --basedir=/koinos

  jsonrpc:
    image: koinos/koinos-jsonrpc:${JSONRPC_TAG:-latest}
    # profiles: ["jsonrpc", "all"]
    depends_on:
      - amqp
      - config
    volumes:
      - "${BASEDIR}:/koinos"
    ports:
      - "${JSONRPC_INTERFACE:-0.0.0.0}:8080:8080"
    command: --basedir=/koinos

  transaction_store:
    image: koinos/koinos-transaction-store:${TRANSACTION_STORE_TAG:-latest}
    profiles: ["transaction_store", "all"]
    depends_on:
      - amqp
      - chain
      - config
    volumes:
      - "${BASEDIR}:/koinos"
    command: --basedir=/koinos

  contract_meta_store:
    image: koinos/koinos-contract-meta-store:${CONTRACT_META_STORE_TAG:-latest}
    profiles: ["contract_meta_store", "all"]
    depends_on:
      - amqp
      - chain
      - config
    volumes:
      - "${BASEDIR}:/koinos"
    command: --basedir=/koinos

networks:
  default:
  webproxy:

volumes:
  letsencrypt-certs:
  pgdata:
