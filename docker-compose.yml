version: '3.9'

services:
  nginx-proxy:
    image: nginxproxy/nginx-proxy:alpine
    restart: on-failure
    ports:
      - '80:80'
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
    networks:
      - webproxy

  # GraphQL
  graphql-gateway:
    build:
      context: .
      dockerfile: 'apps/graphql/gateway/Dockerfile'
      target: development
    command: npm run start:graphql-gateway
    env_file:
      - 'apps/graphql/gateway/.env'
    depends_on:
      - chain-graphql
      - contracts-graphql
    volumes:
      - ./data/logs:/var/logs
      - ./apps:/app/apps
      - ./modules:/app/modules
      - /app/node_modules
    networks:
      - webproxy
      - default
    dns:
      - 8.8.8.8
    ports:
      - "3000:3000"

  # Koiner Chain
  chain-graphql:
    build:
      context: .
      dockerfile: 'apps/chain/graphql/Dockerfile'
      target: development
    command: npm run start:chain-graphql
    env_file:
      - 'apps/chain/graphql/.env'
    depends_on:
      - postgres
    volumes:
      - ./data/logs:/var/logs
      - ./apps:/app/apps
      - ./modules:/app/modules
      - /app/node_modules
    networks:
      - webproxy
      - default
    dns:
      - 8.8.8.8
    ports:
      - "3001:3001"

  contracts-graphql:
    build:
      context: .
      dockerfile: 'apps/contracts/graphql/Dockerfile'
      target: development
    command: npm run start:contracts-graphql
    env_file:
      - 'apps/contracts/graphql/.env'
    depends_on:
      - postgres
    volumes:
      - ./data/logs:/var/logs
      - ./apps:/app/apps
      - ./modules:/app/modules
      - /app/node_modules
    networks:
      - webproxy
      - default
    dns:
      - 8.8.8.8
    ports:
      - "3002:3002"

  postgres:
    image: postgres
    restart: always
    networks:
      - default
      - webproxy
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - VIRTUAL_PORT=5432
      - VIRTUAL_HOST=pg.docker
    container_name: postgres-db
    volumes:
      - ./data/pgdata:/var/lib/postgresql/data

  #
  # Koinos
  #
  amqp:
    image: rabbitmq:3-management
    ports:
      - '${AMQP_INTERFACE:-127.0.0.1}:5672:5672'
      - '${AMQP_INTERFACE:-127.0.0.1}:15672:15672'

  config:
    build:
      context: ./koinos/config
      args:
        - CONFIG_TAG=${CONFIG_TAG:-latest}
    environment:
      - DESCRIPTORS_TAG=${DESCRIPTORS_TAG:-master}
    volumes:
      - "${BASEDIR}:/koinos"

  mempool:
    image: koinos/koinos-mempool:${MEMPOOL_TAG:-latest}
    depends_on:
      - amqp
      - config
    volumes:
      - '${BASEDIR}:/koinos'
    command: --basedir=/koinos

  block_store:
    image: koinos/koinos-block-store:${BLOCK_STORE_TAG:-latest}
    depends_on:
      - amqp
      - config
    volumes:
      - '${BASEDIR}:/koinos'
    command: --basedir=/koinos

  chain:
    image: koinos/koinos-chain:${CHAIN_TAG:-latest}
    depends_on:
      - amqp
      - block_store
      - mempool
      - config
    volumes:
      - '${BASEDIR}:/koinos'
    command: --basedir=/koinos

  p2p:
    image: koinos/koinos-p2p:${P2P_TAG:-latest}
    depends_on:
      - amqp
      - block_store
      - chain
      - config
    volumes:
      - '${BASEDIR}:/koinos'
    ports:
      - '${P2P_INTERFACE:-0.0.0.0}:8888:8888'
    command: --basedir=/koinos

  #   block_producer:
  #      image: koinos/koinos-block-producer:${BLOCK_PRODUCER_TAG:-latest}
  #      profiles: ["block_producer", "all"]
  #      depends_on:
  #         - amqp
  #         - mempool
  #         - chain
  #         - config
  #      volumes:
  #         - "${BASEDIR}:/koinos"
  #      command: --basedir=/koinos

  jsonrpc:
    image: koinos/koinos-jsonrpc:${JSONRPC_TAG:-latest}
    # profiles: ["jsonrpc", "all"]
    depends_on:
      - amqp
      - config
    volumes:
      - '${BASEDIR}:/koinos'
    ports:
      - '${JSONRPC_INTERFACE:-0.0.0.0}:8080:8080'
    command: --basedir=/koinos

  transaction_store:
    image: koinos/koinos-transaction-store:${TRANSACTION_STORE_TAG:-latest}
    profiles: ['transaction_store', 'all']
    depends_on:
      - amqp
      - chain
      - config
    volumes:
      - '${BASEDIR}:/koinos'
    command: --basedir=/koinos

  contract_meta_store:
    image: koinos/koinos-contract-meta-store:${CONTRACT_META_STORE_TAG:-latest}
    profiles: ['contract_meta_store', 'all']
    depends_on:
      - amqp
      - chain
      - config
    volumes:
      - '${BASEDIR}:/koinos'
    command: --basedir=/koinos

networks:
  default:
  webproxy:

volumes:
  letsencrypt-certs:
  pgdata:
